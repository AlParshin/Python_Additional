# Создайте функцию, которая получает на вход дату в формате DD.MM.YYYY
# и возвращает истину, если дата может существовать или ложь, если такая дата невозможна.
# Для простоты договоримся, что год может быть в диапазоне [1, 9999].
# И весь период действует григорианский календарь.
# Проверку года на високосность вынести в отдельную защищенную функцию.

# - unittest

import unittest


class TestClearText(unittest.TestCase):
    def test_date(self):
        """Проверка корректности введенной даты"""
        self.assertEqual(checkDate('27.05.2023'), True)
        self.assertEqual(checkDate('32.01.1920'), False)
        self.assertEqual(checkDate('15.12.2000'), True)

    def test_for_leap_year(self):
        """Проверка на високосный год"""
        self.assertEqual(checkForLeapYear('29.02.2024'), True)
        self.assertEqual(checkForLeapYear('29.02.2023'), False)
        self.assertEqual(checkForLeapYear('29.02.1988'), True)


def checkDate(date):
    mass = date.split(".")
    check = True
    # Общая проверка на валидность
    if (int(mass[0]) > 31) or (int(mass[0]) < 1):
        check = False
    elif (int(mass[1]) > 12) or (int(mass[1]) < 1):
        check = False
    elif (int(mass[2]) > 9999) or (int(mass[2]) < 1):
        check = False
    # Проверка на 30 дней в месяце
    for i in [4, 6, 9, 11]:
        if (int(mass[1]) == i) and (int(mass[0]) > 30):
            check = False
    return check


def checkForLeapYear(date):
    mass = date.split(".")
    check = True
    # Проверка на високосный год
    if (int(mass[1]) == 2):
        if int(mass[2]) % 4 == 0:
            if int(mass[0]) > 29:
                check = False
        else:
            if int(mass[0]) > 28:
                check = False
    return check


if __name__ == '__main__':
    unittest.main(verbosity=10)
